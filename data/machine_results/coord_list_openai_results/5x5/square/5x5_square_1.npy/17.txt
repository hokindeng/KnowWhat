You are tasked with solving a maze. The maze is a 2D grid with walls, empty spaces, a current player position and a goal position. The maze is encoded using a list of coordinates denoting the walls, a list of coordinates denoting the empty spaces (path), and coordinates for the current player position and goal position.
Your objective is to find a step-by-step solution to navigate from the current player position (P) to the goal position (G), moving only through empty spaces while avoiding walls. For reference, the coordinates of the top left corner of the maze are (0,0). You can move to any empty space that is adjacent to the current position in the up, down, left, or right direction. After each move, the maze will be updated to reflect your new position and presented to you again.
Here is the maze you should solve:

Walls: (0, 0), (0, 4), (1, 0), (1, 2), (1, 4), (2, 0), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)
Empty: (0, 2), (0, 3), (1, 1), (2, 1), (2, 2), (2, 3)
Player position: (1, 3)
Goal: (0, 1)

Please provide the coordinates of your next move.To solve the maze, we need to navigate from the current player position (1, 3) to the goal position (0, 1) while avoiding walls and only moving through empty spaces. We can use a breadth-first search (BFS) algorithm to find the shortest path.

Here is the step-by-step process to find the next move:

1. Initialize the BFS queue with the starting position (1, 3) and an empty path.
2. Use a set to keep track of visited positions to avoid revisiting them.
3. For each position, check the possible moves (up, down, left, right) and add the valid moves to the queue.
4. If a move reaches the goal position, return the path.

Let's start the BFS algorithm:

1. Initialize the queue with the starting position and an empty path:
   Queue: [((1, 3), [])]
   Visited: {(1, 3)}

2. Dequeue the first element:
   Current position: (1, 3)
   Path: []

3. Check possible moves from (1, 3):
   - Up: (0, 3) (valid move, empty space)
   - Down: (2, 3) (valid move, empty space)
   - Left: (1, 2) (invalid move, wall)
   - Right: (1, 4) (invalid move, wall)

4. Add valid moves to the queue:
   Queue: [((0, 3), [(0, 3)]), ((2, 3), [(2, 3)])]
   Visited: {(1, 3), (0, 3), (2, 3)}

5. Dequeue the next element:
   Current position: (0, 3)
   Path: [(0, 3)]

6. Check possible moves from (0, 3):
   - Up: (invalid move, out of bounds)
   - Down: (1, 3) (invalid move, already visited)
   - Left: (0, 2) (valid move, empty space)
   - Right: (0, 4) (invalid move, wall)

7. Add valid moves to the queue:
   Queue: [((2, 3), [(2, 3)]), ((0, 2), [(0, 3), (0, 2)])]
   Visited: {(1, 3), (0, 3), (2, 3), (0, 2)}

8. Dequeue the next element:
   Current position: (2, 3)
   Path: [(2, 3)]

9. Check possible moves from (2, 3):
   - Up: (1, 3) (invalid move, already visited)
   - Down: (invalid move, out of bounds)
   - Left: (2, 2) (valid move, empty space)
   - Right: (2, 4) (invalid move, wall)

10. Add valid moves to the queue:
    Queue: [((0, 2), [(0, 3), (0, 2)]), ((2, 2), [(2, 3), (2, 2)])]
    Visited: {(1, 3), (0, 3), (2, 3), (0, 2), (2, 2)}

11. Dequeue the next element:
    Current position: (0, 2)
    Path: [(0, 3), (0, 2)]

12. Check possible moves from (0, 2):
    - Up: (invalid move, out of bounds)
    - Down: (1, 2) (invalid move, wall)
    - Left: (0, 1) (valid move, empty space, goal position)
    - Right: (0, 3) (invalid move, already visited)

13. Add valid moves to the queue:
    Queue: [((2, 2), [(2, 3), (2, 2)]), ((0, 1), [(0, 3), (0, 2), (0, 1)])]
    Visited: {(1, 3), (0, 3), (2, 3), (0, 2), (2, 2), (0, 1)}

14. Dequeue the next element:
    Current position: (0, 1)
    Path: [(0, 3), (0, 2), (0, 1)]

15. Goal position reached. The path to the goal is [(0, 3), (0, 2), (0, 1)].

The next move from the current position (1

SOLVE: FAIL

For the maze you were tasked to solve, please provide: (1) the name of the general shape formed by the empty spaces (corridors), and (2) a new maze of the same size, with empty spaces that form the same shape. Encode your new maze using the same format as the original.

For example, if you answered (1) by naming the general shape of the path as "{shape}" (where "{shape}" is the name of the shape), then in (2), you should generate a new maze that meets the following criteria:
* It has the same size as the original maze
* It includes a valid path from P to G that can be reached through empty spaces
* It is not an identical copy of the original maze
* The general shape formed by its empty spaces (corridors) is recognizable as "{shape}".

1. The general shape formed by the empty spaces (corridors) in the original maze is a "T" shape.

2. Here is a new maze of the same size (5x5 grid) with empty spaces that form the same "T" shape:

Walls: (0, 0), (0, 1), (0, 4), (1, 0), (1, 4), (2, 0), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)
Empty: (0, 2), (0, 3), (1, 2), (2, 2), (2, 3), (2, 1)
Player position: (1, 3)
Goal: (0, 3)

In this new maze, the empty spaces form a "T" shape, and there is a valid path from the player position (1, 3) to the goal position (0, 3).

RECOGNIZE: FAIL

GENERATE: FAIL