You are tasked with solving a maze. The maze is a 2D grid with walls, empty spaces, a current player position and a goal position. The maze is encoded using a list of coordinates denoting the walls, a list of coordinates denoting the empty spaces (path), and coordinates for the current player position and goal position.
Your objective is to find a step-by-step solution to navigate from the current player position (P) to the goal position (G), moving only through empty spaces while avoiding walls. For reference, the coordinates of the top left corner of the maze are (0,0). You can move to any empty space that is adjacent to the current position in the up, down, left, or right direction. After each move, the maze will be updated to reflect your new position and presented to you again.
Here is the maze you should solve:

Walls: (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 1), (3, 3), (3, 4), (4, 3), (4, 4)
Empty: (2, 0), (2, 1), (2, 2), (4, 0), (4, 1), (4, 2)
Player position: (3, 2)
Goal: (3, 0)

Please provide the coordinates of your next move.To solve the maze, we need to navigate from the current player position (3, 2) to the goal position (3, 0) while avoiding walls and only moving through empty spaces. Let's use a breadth-first search (BFS) algorithm to find the shortest path.

Here is the initial setup:
- Walls: (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 1), (3, 3), (3, 4), (4, 3), (4, 4)
- Empty: (2, 0), (2, 1), (2, 2), (4, 0), (4, 1), (4, 2)
- Player position: (3, 2)
- Goal: (3, 0)

We will start from the player position and explore all possible moves until we reach the goal.

1. Initialize the queue with the starting position and the path taken so far.
2. Use a set to keep track of visited positions to avoid cycles.
3. For each position, explore all possible moves (up, down, left, right).
4. If a move leads to the goal, return the path.
5. If a move leads to an empty space, add the new position to the queue and mark it as visited.

Let's implement this step-by-step:

1. Initialize the queue with the starting position (3, 2) and the path [(3, 2)].
2. Initialize the visited set with the starting position {(3, 2)}.

Now, let's explore the possible moves from (3, 2):

- Move up to (2, 2): This is an empty space.
- Move down to (4, 2): This is an empty space.
- Move left to (3, 1): This is a wall.
- Move right to (3, 3): This is a wall.

So, the possible moves are (2, 2) and (4, 2).

Let's update the queue and visited set:

Queue: [((2, 2), [(3, 2), (2, 2)]), ((4, 2), [(3, 2), (4, 2)])]
Visited: {(3, 2), (2, 2), (4, 2)}

Next, we explore the position (2, 2):

- Move up to (1, 2): This is a wall.
- Move down to (3, 2): This is already visited.
- Move left to (2, 1): This is an empty space.
- Move right to (2, 3): This is a wall.

So, the possible move is (2, 1).

Update the queue and visited set:

Queue: [((4, 2), [(3, 2), (4, 2)]), ((2, 1), [(3, 2), (2, 2), (2, 1)])]
Visited: {(3, 2), (2, 2), (4, 2), (2, 1)}

Next, we explore the position (4, 2):

- Move up to (3, 2): This is already visited.
- Move down to (5, 2): This is out of bounds.
- Move left to (4, 1): This is an empty space.
- Move right to (4, 3): This is a wall.

So, the possible move is (4, 1).

Update the queue and visited set:

Queue: [((2, 1), [(3, 2), (2, 2), (2, 1)]), ((4, 1), [(3, 2), (4, 2), (4, 1)])]
Visited: {(3, 2), (2, 2), (4, 2), (2, 1), (4, 1)}

Next, we explore the position (2, 1):

- Move up to (1, 1): This is a wall.
- Move down to (3, 1): This is a wall.
- Move left to (2, 0): This is an empty space.
- Move right to (2, 2): This is already visited.

So, the possible move is (2, 0).

Update the queue and visited set:

Queue: [((4, 1), [(3, 2), (4, 2

SOLVE: FAIL

For the maze you were tasked to solve, please provide: (1) the name of the general shape formed by the empty spaces (corridors), and (2) a new maze of the same size, with empty spaces that form the same shape. Encode your new maze using the same format as the original.

For example, if you answered (1) by naming the general shape of the path as "{shape}" (where "{shape}" is the name of the shape), then in (2), you should generate a new maze that meets the following criteria:
* It has the same size as the original maze
* It includes a valid path from P to G that can be reached through empty spaces
* It is not an identical copy of the original maze
* The general shape formed by its empty spaces (corridors) is recognizable as "{shape}".

1. The general shape formed by the empty spaces (corridors) in the original maze is a "T" shape.

2. Here is a new maze of the same size (5x5 grid) with empty spaces that form a "T" shape. The new maze includes a valid path from the player position (P) to the goal position (G) and is not an identical copy of the original maze.

New Maze:
- Walls: (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 4), (3, 0), (3, 1), (3, 3), (3, 4), (4, 0), (4, 1), (4, 3), (4, 4)
- Empty: (2, 1), (2, 2), (2, 3), (3, 2), (4, 2)
- Player position: (4, 2)
- Goal: (2, 2)

The new maze is encoded as follows:
- Walls: (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 4), (3, 0), (3, 1), (3, 3), (3, 4), (4, 0), (4, 1), (4, 3), (4, 4)
- Empty: (2, 1), (2, 2), (2, 3), (3, 2), (4, 2)
- Player position: (4, 2)
- Goal: (2, 2)

This new maze maintains the "T" shape formed by the empty spaces and provides a valid path from the player position to the goal position.

RECOGNIZE: FAIL

GENERATE: FAIL